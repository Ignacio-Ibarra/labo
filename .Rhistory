getwd()
setwd("~/labo")
setwd("./labo")
setwd("~/Desktop/EyF 2022")
setwd("~/Desktop/EyF 2022")
require(data.table)
library(dplyr)
#optional tag row for later identification:
data$rowid<-1:nrow(data)
data <- fread("./datasets/competencia1_2022.csv")
set.seed(1)
x <- rnorm(n = 100)
y <- rep(x = c("A","B"), times = c(50,50))
z <- rep(x = c("D","E","F"), times = c(33,33,34))
data <- data.frame(x, y=sample(y, replace = TRUE), z=sample(z, replace=TRUE))
View(data)
#optional tag row for later identification:
data$rowid<-1:nrow(data)
View(data)
testgroup<-dplyr_stratified(data, 0.8, z, y)
dplyr_stratified <- function(df, percent, ...){
columns<-enquos(...)
#group then sample each group
out<-df %>% group_by(!!!columns)  %>% slice( sample(1:n(), percent*n()))
}
testgroup<-dplyr_stratified(data, 0.8, z, y)
View(testgroup)
set.seed(1)
x <- rnorm(n = 100)
y <- rep(x = c("A","B"), times = c(60,50))
z <- rep(x = c("D","E","F"), times = c(10,10,80))
data <- data.frame(x, y=sample(y, replace = TRUE), z=sample(z, replace=TRUE))
testgroup<-dplyr_stratified(data, 0.8, z, y)
testgroup
View(testgroup)
testgroup %>% group_by(z) %>% count()
set.seed(1)
N = 1000
x <- rnorm(n = N)
y <- rep(x = c("A","B"), times = c(N*0.48,N*0.52))
z <- rep(x = c("D","E","F"), times = c(N*0.10,N*0.10,N*0.80))
data <- data.frame(x, y=sample(y, replace = TRUE), z=sample(z, replace=TRUE))
data$rowid<-1:nrow(data)
dplyr_stratified <- function(df, percent, ...){
columns<-enquos(...)
#group then sample each group
out<-df %>% group_by(!!!columns)  %>% slice( sample(1:n(), percent*n()))
}
testgroup<-dplyr_stratified(data, 0.8, z, y)
View(testgroup)
testgroup %>% group_by(z) %>% count()
testgroup %>% group_by(y) %>% count()
testgroup %>% group_by(y,z) %>% count()
require(data.table)
require(dplyr)
require(data.table)
require(dplyr)
setwd("~/Desktop/EyF 2022")
data <- fread("./datasets/competencia1_2022.csv")
View(data)
muestra<-dplyr_stratified(data, 0.5, foto_mes, clase_ternaria)
muestra %>% group_by(y,z) %>% count()
muestra %>% group_by(foto_mes,clase_ternaria) %>% count()
setwd("~/Desktop/EyF 2022/labo")
data <- fread("../datasets/competencia1_2022.csv")
getwd()
require(data.table)
require(ggplot2)
setwd("../")
logs.z611 <- fread("./exp/HT6110/HT6110.txt")
View(logs.z611)
dataset <- fread("./datasets/competencia1_2022.csv")
View(logs.z611)
View(logs.z611)
a <- list("letra1" = "a", "letra2" = "b, "letra3" = c","nro1" = 1234, "letra4" = "h")
a <- list(letra1 = "a", letra2 = "b", letra3 = "c",nro1 = 1234, letra4 = "h")
a[, "letra2", with=F]
a[, -"letra2", with=F]
a <- DT(a)
a <- data.table(a)
a[, -"letra2", with=F]
logs.z611[1]
a <- logs.z611[1]
a[, -"iteracion", with=F]
a[, -c("iteracion","marzo_corte"), with=F]
require(data.table)
require(ggplot2)
setwd("../")
logs.z611 <- fread("./exp/HT6110/HT6110.txt")
getwd()
setwd("~/Desktop/EyF 2022")
require(data.table)
require(ggplot2)
setwd("~/Desktop/EyF 2022")
logs.z611 <- fread("./exp/HT6110/HT6110.txt")
dataset <- fread("./datasets/competencia1_2022.csv")
#creo la clase_binaria  SI= {BAJA+1, BAJA+2}  NO={CONTINUA}
dataset[ foto_mes==202101, clase_binaria :=  ifelse( clase_ternaria=="CONTINUA", "NO", "SI" ) ]
#defino los datos donde entreno
dtrain  <- dataset[ foto_mes==202101, ]  #defino donde voy a entrenar
dapply  <- dataset[ foto_mes==202103, ]  #defino donde voy a aplicar el modelo
topN <- 20
correr <- logs.z611[order(ranking_marzo), head(.SD, topN)][, .(cp, minsplit, minbucket, maxdepth, iteracion, marzo_corte)]
#Funci贸n para generar archivos para kaggle.
fit.predict <- function(param.list, train.set, test.set){
iteracion <- param.list$iteracion
marzo_corte <- param.list$marzo_corte
modelo <- rpart(formula =  "clase_binaria ~ .  -clase_ternaria",
data = train.set,
control = param.list[, -c("iteracion","marzo_corte"), with=F])
cat("Ya entren贸 iteracion: ", iteracion)
prediccion  <- predict(modelo,
test.set,
type= "prob")
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dfinal  <- copy( test.set[ , list(numero_de_cliente) ] )
dfinal[ , prob_SI := prediccion[ , "SI"] ]
# por favor cambiar por una semilla propia
# que sino el Fiscal General va a impugnar la prediccion
set.seed(635837)
dfinal[ , azar := runif( nrow(test.set) ) ]
# ordeno en forma descentente, y cuando coincide la probabilidad, al azar
setorder( dfinal, -prob_SI, azar )
dia.mes <- format(Sys.Date(),"%d%m")
kaggle.folder <- paste0("KA", dia.mes)
dir.create( paste0("./exp/", kaggle.folder) )
dfinal[ , Predicted := 0L ]
dfinal[ 1:marzo_corte , Predicted := 1L ]
fwrite( dfinal[ , list(numero_de_cliente, Predicted) ], #solo los campos para Kaggle
file= paste0( "./exp/", kaggle.folder,"/",kaggle.folder,"_it_",iteracion,"_corte_", marzo_corte, "_binaria.csv"),
sep=  "," )
}
lapply(1:topN, function(x) fit.predict(correr[x], dtrain, dapply))
require(data.table)
require(ggplot2)
require(rpart)
require(rpart.plot)
setwd("~/Desktop/EyF 2022")
logs.z611 <- fread("./exp/HT6110/HT6110.txt")
dataset <- fread("./datasets/competencia1_2022.csv")
#creo la clase_binaria  SI= {BAJA+1, BAJA+2}  NO={CONTINUA}
dataset[ foto_mes==202101, clase_binaria :=  ifelse( clase_ternaria=="CONTINUA", "NO", "SI" ) ]
#defino los datos donde entreno
dtrain  <- dataset[ foto_mes==202101, ]  #defino donde voy a entrenar
dapply  <- dataset[ foto_mes==202103, ]  #defino donde voy a aplicar el modelo
topN <- 20
correr <- logs.z611[order(ranking_marzo), head(.SD, topN)][, .(cp, minsplit, minbucket, maxdepth, iteracion, marzo_corte)]
#Funci贸n para generar archivos para kaggle.
fit.predict <- function(param.list, train.set, test.set){
iteracion <- param.list$iteracion
marzo_corte <- param.list$marzo_corte
modelo <- rpart(formula =  "clase_binaria ~ .  -clase_ternaria",
data = train.set,
control = param.list[, -c("iteracion","marzo_corte"), with=F])
cat("Ya entren贸 iteracion: ", iteracion)
prediccion  <- predict(modelo,
test.set,
type= "prob")
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dfinal  <- copy( test.set[ , list(numero_de_cliente) ] )
dfinal[ , prob_SI := prediccion[ , "SI"] ]
# por favor cambiar por una semilla propia
# que sino el Fiscal General va a impugnar la prediccion
set.seed(635837)
dfinal[ , azar := runif( nrow(test.set) ) ]
# ordeno en forma descentente, y cuando coincide la probabilidad, al azar
setorder( dfinal, -prob_SI, azar )
dia.mes <- format(Sys.Date(),"%d%m")
kaggle.folder <- paste0("KA", dia.mes)
dir.create( paste0("./exp/", kaggle.folder) )
dfinal[ , Predicted := 0L ]
dfinal[ 1:marzo_corte , Predicted := 1L ]
fwrite( dfinal[ , list(numero_de_cliente, Predicted) ], #solo los campos para Kaggle
file= paste0( "./exp/", kaggle.folder,"/",kaggle.folder,"_it_",iteracion,"_corte_", marzo_corte, "_binaria.csv"),
sep=  "," )
}
lapply(1:topN, function(x) fit.predict(correr[x], dtrain, dapply))
require(ggplot2)
require(data.table)
setwd("~/Desktop/EyF 2022")
logs.z611 <- fread("./exp/HT6110/HT6110.txt")
require(ggplot2)
require(data.table)
setwd("~/Desktop/EyF 2022")
logs.z611 <- fread("./exp/HT6110/HT6110.txt")
View(logs.z611)
exps <- fread("./exp/HT6110/HT6110.txt")
View(exps)
ggplot(exps, aes(x=ranking_xval, y=ranking_marzo))+geom_point()
ggplot(exps, aes(x=ganancia, y=ganancia_marzo))+geom_point()
View(exps)
ggplot(exps, aes(x=ganancia, y=marzo_ganancia))+geom_point()
ggplot(exps[ganancia_marzo>15000000], aes(x=ganancia, y=marzo_ganancia))+geom_point()
ggplot(exps[marzo_ganancia>15000000], aes(x=ganancia, y=marzo_ganancia))+geom_point()
View(exps)
pca <- prcomp(exps[, ..(cp, maxdepth, minsplit, marzo_corte, minbucket)], scale=T)
pca <- prcomp(exps[, .(cp, maxdepth, minsplit, marzo_corte, minbucket)], scale=T)
View(pca)
