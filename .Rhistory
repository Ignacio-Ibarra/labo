install.packages("akmedoids")
get_min_loss <- function(variable, kmax=10){
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, x)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
}
get_min_loss(exp633$ganancia, 10)
require(akmedoids)
get_min_loss <- function(variable, kmax=10){
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, x)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
}
get_min_loss(exp633$ganancia, 10)
get_min_loss <- function(variable, kmax=10){
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, x)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
return(k)
}
get_min_loss(exp633$ganancia, 10)
get_min_loss(exp633$ganancia, 20)
get_min_loss(exp633$ganancia, 20)
get_min_loss(exp633$ganancia, 20)
get_min_loss <- function(variable, kmax=10){
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, x)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
return(round(k,1))
}
get_min_loss(exp633$ganancia, 20)
set.seed(123)
get_min_loss <- function(variable, kmax=10){
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, x)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
return(round(k,1))
}
get_min_loss(exp633$ganancia, 20)
get_min_loss(exp633$ganancia, 20)
get_min_loss <- function(variable, kmax=10){
set.seed(123)
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, centers = x)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
return(round(k,1))
}
get_min_loss(exp633$ganancia, 20)
get_min_loss <- function(variable, kmax=10){
set.seed(123)
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, centers = x)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
return(round(k,1))
}
get_min_loss(exp633$ganancia, 20)
get_min_loss <- function(variable, kmax=10){
set.seed(123)
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, centers = x)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
return(round(k,1))
}
get_min_loss(exp633$ganancia, 20)
get_min_loss <- function(variable, kmax=10){
set.seed(123)
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, centers = x)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
return(round(k,1))
}
get_min_loss(exp633$ganancia, 20)
get_min_loss <- function(variable, kmax=10){
set.seed(123)
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, centers = x, nstart=10)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
return(round(k,1))
}
get_min_loss(exp633$ganancia, 20)
get_min_loss <- function(variable, kmax=10){
set.seed(123)
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, centers = x, nstart=10)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
return(round(k,1))
}
get_min_loss(exp633$ganancia, 20)
get_min_loss <- function(variable, kmax=10){
set.seed(123)
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, centers = x, nstart=10)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
return(round(k,1))
}
get_min_loss(exp633$ganancia, 20)
ggplot(exp633, aes(x=iteracion, y=ganancia))+geom_line()
p1 <- ggplot(exp633, aes(x=iteracion, y=ganancia))+geom_line()
require(data.table)
require(ggplot2)
require(akmedoids)
setwd("~/Desktop/EyF 2022")
exp633 <- fread("./exp/HT6330/HT6330.txt")
# # Pensaba en hacer kmeans para usar los centroides para armar grupos de ganancia
# get_min_loss <- function(variable, kmax=10){
#   set.seed(123)
#   losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, centers = x, nstart=10)$tot.withinss))
#   k <- elbow_point(2:kmax, losses)$x
#   return(round(k,1))
#   }
#
# get_min_loss(exp633$ganancia, 20)
p1 <- ggplot(exp633, aes(x=iteracion, y=ganancia))+geom_line()
bins <- 4
quantile(exp633$ganancia, bins)
seq_along()
seq_along(1)
seq_along(1:6)
seq_along(0:1)
seq_along(0.01:1)
seq(0,1,by=5)
bins <- 4
c(1:bins)/10
seq(0.1, 0.9, by =0.1)
seq(0, 1, by =0.1)
cut(exp633$ganancia, 5)
plot(cut(exp633$ganancia, 5))
plot(cut(exp633$ganancia, 3))
plot(cut(exp633$ganancia, 10))
plot(cut(exp633$ganancia, 16))
plot(cut(exp633$ganancia, 20))
require(dplyr)
exp633 %>% ntile(ganancia)
quantile(exp633$ganancia)
seq_len(0,1, 4)
c(seq(0, 50, 0.001), 51:100)
seq(0, 50, 0.001)
bins <- 4
1/bins
seq(1/bins,1,1/bins)
probs <- seq(1/bins,1,1/bins)
quantile(exp633$ganancia, probs)
max(exp633$ganancia)
install.packages("gtools")
require(gtools)
quantcut(exp633$ganancia, q = 4)
paste0(c("level"),1:4)
quantcut(exp633$ganancia, q = bins, labels = paste0(c("level"),1:bins))
exp633$gan.bin <- quantcut(exp633$ganancia, q = bins, labels = paste0(c("level"),1:bins))
bins <- 5
exp633$gan.bin <- quantcut(exp633$ganancia, q = bins, labels = paste0(c("level"),1:bins))
pca <- prcomp(exp633[, cols], scale=T)
cols <- c("num.trees","max.depth","min.node.size","mtry")
pca <- prcomp(exp633[, cols], scale=T)
pca <- prcomp(exp633[cols], scale=T)
exp633[, cols]
exp633[cols]
exp633[, .(cols)]
exp633[, (cols)]
exp633[, .cols]
exp633[, .cols]
View(exp633)
setwd("~/Desktop/EyF 2022")
exp633 <- fread("./exp/HT6330/HT6330.txt")
p1 <- ggplot(exp633, aes(x=iteracion, y=ganancia))+geom_line()
bins <- 5
exp633$gan.bin <- quantcut(exp633$ganancia, q = bins, labels = paste0(c("level"),1:bins))
cols <- c("num.trees","max.depth","min.node.size","mtry")
require(data.table)
require(ggplot2)
require(gtools)
# require(akmedoids)
setwd("~/Desktop/EyF 2022")
exp633 <- fread("./exp/HT6330/HT6330.txt")
exp633$gan.bin <- quantcut(exp633$ganancia, q = bins, labels = paste0(c("level"),1:bins))
cols <- c("num.trees","max.depth","min.node.size","mtry")
exp633[, ..cols]
pca <- prcomp(exp633[, ..cols], scale=T)
pca$sdev^2
pca$sdev^2/ cumsum(pca$sdev^2)
pca$sdev^2/ sum(pca$sdev^2)
ggplot(data = data.frame(prop.varianza.acum, pc = 1:lenght(cols)),
aes(x = pc, y = prop.varianza.acum)) +
geom_point() +
geom_line() +
prop.varianza.acum <- cumsum(pca$sdev^2) / sum(pca$sdev^2)
ggplot(data = data.frame(prop.varianza.acum, pc = 1:lenght(cols)),
aes(x = pc, y = prop.varianza.acum)) +
geom_point() +
geom_line()
gplot(data = data.frame(prop.varianza.acum, pc = 1:length(cols)),
aes(x = pc, y = prop.varianza.acum)) +
geom_point()
ggplot(data = data.frame(prop.varianza.acum, pc = 1:length(cols)),
aes(x = pc, y = prop.varianza.acum)) +
geom_point() +
geom_line()
require(ggfortify)
autoplot(pca, data = exp633, colour = gan.bin,
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
autoplot(pca, data = exp633, colour = "gan.bin",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
bins <- 3
exp633$gan.bin <- quantcut(exp633$ganancia, q = bins, labels = paste0(c("level"),1:bins))
cols <- c("num.trees","max.depth","min.node.size","mtry")
pca <- prcomp(exp633[, ..cols], scale=T)
autoplot(pca, data = exp633, colour = "gan.bin",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
png("./work/pcaBORanger.png")
pca1 <- autoplot(pca, data = exp633, colour = "gan.bin",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
dev.off()
getwd()
png("./work/pcaBORanger.png")
autoplot(pca, data = exp633, colour = "gan.bin",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
dev.off()
bins <- 4
exp633$gan.bin <- quantcut(exp633$ganancia, q = bins, labels = paste0(c("level"),1:bins))
cols <- c("num.trees","max.depth","min.node.size","mtry")
pca <- prcomp(exp633[, ..cols], scale=T)
png("./work/pcaBORanger.png")
autoplot(pca, data = exp633, colour = "gan.bin",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
dev.off()
exp633$gan.bin
exp633 %>% group_by(gan.bin) %>% summarise(minimo=min(ganancia), maximo=max(ganancia))
tab1 <- exp633 %>% group_by(gan.bin) %>% summarise(minimo=min(ganancia), maximo=max(ganancia))
require(kableExtra)
kable(tab1)
tab1 <- exp633 %>% group_by(gan.bin) %>% summarise(minimo=min(ganancia), maximo=max(ganancia))
require(grid)
myTable <- tableGrob(
tab1,
rows = NULL,
theme = ttheme_default(core = list(bg_params = list(fill = "grey99")))
)
require(grid)
kable_as_image(tab1)
require(gridExtra)
myTable <- tableGrob(
tab1,
rows = NULL,
theme = ttheme_default(core = list(bg_params = list(fill = "grey99")))
)
grid.draw(myTable)
png("./work/pcaBORanger.png")
autoplot(pca, data = exp633, colour = "gan.bin",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
dev.off()
png("./work/bins.png")
grid.draw(myTable)
dev.off()
View(exp633)
require(data.table)
require(ggplot2)
require(gtools)
require(ggfortify)
require(gridExtra)
# require(akmedoids)
setwd("~/Desktop/EyF 2022")
exp633 <- fread("./exp/HT6330/HT6330.txt")
# # Pensaba en hacer kmeans para usar los centroides para armar grupos de ganancia
# get_min_loss <- function(variable, kmax=10){
#   set.seed(123)
#   losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, centers = x, nstart=10)$tot.withinss))
#   k <- elbow_point(2:kmax, losses)$x
#   return(round(k,1))
#   }
#
# get_min_loss(exp633$ganancia, 20)
p1 <- ggplot(exp633, aes(x=iteracion, y=ganancia))+geom_line()
bins <- 4
exp633$gan.bin <- quantcut(exp633$ganancia, q = bins, labels = paste0(c("level"),1:bins))
cols <- c("num.trees","max.depth","min.node.size","mtry")
pca <- prcomp(exp633[, ..cols], scale=T)
png("./work/pcaBORanger.png")
autoplot(pca, data = exp633, colour = "gan.bin",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
dev.off()
tab1 <- exp633 %>% group_by(gan.bin) %>% summarise(minimo=min(ganancia), maximo=max(ganancia))
require(dplyr)
tab1 <- exp633 %>% group_by(gan.bin) %>% summarise(minimo=min(ganancia), maximo=max(ganancia))
myTable <- tableGrob(
tab1,
rows = NULL,
theme = ttheme_default(core = list(bg_params = list(fill = "grey99")))
)
png("./work/bins.png")
grid.draw(myTable)
require(grid)
tab1 <- exp633 %>% group_by(gan.bin) %>% summarise(minimo=min(ganancia), maximo=max(ganancia))
myTable <- tableGrob(
tab1,
rows = NULL,
theme = ttheme_default(core = list(bg_params = list(fill = "grey99")))
)
png("./work/bins.png")
grid.draw(myTable)
dev.off()
kable_as_image(tab1)
require(kableExtra)
kable_as_image(tab1)
bins <- 5
exp633$gan.bin <- quantcut(exp633$ganancia, q = bins, labels = paste0(c("level"),1:bins))
cols <- c("num.trees","max.depth","min.node.size","mtry")
pca <- prcomp(exp633[, ..cols], scale=T)
png("./work/pcaBORanger.png")
autoplot(pca, data = exp633, colour = "gan.bin",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
dev.off()
tab1 <- exp633 %>% group_by(gan.bin) %>% summarise(minimo=min(ganancia), maximo=max(ganancia))
myTable <- tableGrob(
tab1,
rows = NULL,
theme = ttheme_default(core = list(bg_params = list(fill = "grey99")))
)
png("./work/bins.png")
grid.draw(myTable)
dev.off()
ggplot(exp633, aes(x=iteracion, y=ganancia))+geom_line()
ggplot(exp633, aes(x=iteracion, y=ganancia))+geom_line()
View(p1)
png("./work/iteracionesOptBay.png")
ggplot(exp633, aes(x=iteracion, y=ganancia))+geom_line()
dev.off()
bins <- 5
exp633$gan.bin <- quantcut(exp633$ganancia, q = bins, labels = paste0(c("level"),1:bins))
cols <- c("num.trees","max.depth","min.node.size","mtry")
pca <- prcomp(exp633[, ..cols], scale=T)
png("./work/pcaBORanger.png")
autoplot(pca, data = exp633, colour = "gan.bin",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
dev.off()
tab1 <- exp633 %>% group_by(gan.bin) %>% summarise(minimo=min(ganancia), maximo=max(ganancia))
myTable <- tableGrob(
tab1,
rows = NULL,
theme = ttheme_default(core = list(bg_params = list(fill = "grey99")))
)
png("./work/bins.png")
grid.draw(myTable)
dev.off()
autoplot(pca, data = exp633, colour = "gan.bin", size="ganancia",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
png("./work/pcaBORanger.png")
autoplot(pca, data = exp633, colour = "gan.bin", size="ganancia",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
dev.off()
png("./work/pcaBORanger.png")
autoplot(pca, data = exp633, colour = "gan.bin",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
dev.off()
png("./work/iteracionesOptBay.png")
ggplot(exp633, aes(x=iteracion, y=ganancia, color=gan.bin))+geom_line()
dev.off()
png("./work/iteracionesOptBay.png")
ggplot(exp633, aes(x=iteracion, y=ganancia))+geom_line()
dev.off()
get_min_loss <- function(variable, kmax=10){
set.seed(123)
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, centers = x, nstart=10)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
return(round(k,1))
}
get_min_loss(exp633$ganancia, 10)
require(akmedoids)
get_min_loss <- function(variable, kmax=10){
set.seed(123)
losses <- unlist(lapply(2:kmax+1, function(x) kmeans(variable, centers = x, nstart=10)$tot.withinss))
k <- elbow_point(2:kmax, losses)$x
return(round(k,1))
}
get_min_loss(exp633$ganancia, 10)
get_min_loss(exp633$ganancia, 20)
get_min_loss(exp633$ganancia, 20)
get_min_loss(exp633$ganancia, 15)
get_min_loss(exp633$ganancia, 16)
get_min_loss(exp633$ganancia, 17)
K <- get_min_loss(exp633$ganancia, 17)
set.seed(123)
kmeans.opt <- kmeans(exp633$ganancia, centers = K, nstart=10)
kmeans.opt$cluster
paste0("level_", kmeans.opt$cluster)
exp633$cluster <- paste0("level_", kmeans.opt$cluster)
png("./work/pcaBORanger.png")
autoplot(pca, data = exp633, colour = "cluster",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
dev.off()
png("./work/pcaBORanger.png")
autoplot(pca, data = exp633, shape= "cluster",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
dev.off()
bins <- 6
exp633$gan.bin <- quantcut(exp633$ganancia, q = bins, labels = paste0(c("level"),1:bins))
cols <- c("num.trees","max.depth","min.node.size","mtry")
pca <- prcomp(exp633[, ..cols], scale=T)
png("./work/pcaBORanger.png")
autoplot(pca, data = exp633, shape= "gan.bin", color="gan.bin",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
dev.off()
tab1 <- exp633 %>% group_by(gan.bin) %>% summarise(minimo=min(ganancia), maximo=max(ganancia))
myTable <- tableGrob(
tab1,
rows = NULL,
theme = ttheme_default(core = list(bg_params = list(fill = "grey99")))
)
png("./work/bins.png")
grid.draw(myTable)
dev.off()
require(data.table)
require(data.table)
getwd()
folder.path <- "../exp/prueba/"
list.files(folder.path)
file.names <- list.files(folder.path)
file.names <- paste0(folder.path, list.files(folder.path))
data <- data.frame()
d1 <- fread(folder.path, file.names[1])
d1 <- fread(paste0(folder.path, file.names[1]))
list.files(folder.path)
folder.path <- "../exp/prueba/"
file.names <- paste0(folder.path, list.files(folder.path))
d1 <- fread(paste0(file.names[1]))
d2 <- fread(paste0(file.names[2]))
d3 <- fread(paste0(file.names[3]))
require(dplyr)
View(d1)
data <- d1 %>% inner_join(d2, by=numero_de_cliente)
data <- d1 %>% inner_join(d2, by=c("numero_de_cliente"))
View(data)
data <- d1 %>% inner_join(d2, by=c("numero_de_cliente")) %>% inner_join(d3, by=c("numero_de_cliente"))
View(data)
View(data)
fwrite(data, paste0(folder.path,"prediccion"))
require(data.table)
require(ggplot2)
require(gtools)
require(ggfortify)
require(gridExtra)
# require(akmedoids)
setwd("~/Desktop/EyF 2022")
exp633 <- fread("./exp/HT6330/HT6330.txt")
ggplot(exp633, aes(x=iteracion, y=ganancia))+geom_line()
bins <- 5
exp633$gan.bin <- quantcut(exp633$ganancia, q = bins, labels = paste0(c("level"),1:bins))
cols <- c("num.trees","max.depth","min.node.size","mtry")
pca <- prcomp(exp633[, ..cols], scale=T)
autoplot(pca, data = exp633, colour = "gan.bin",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()+scale_color_viridis_b()
autoplot(pca, data = exp633, colour = "gan.bin",
loadings = TRUE,
loadings.colour = 'black',
loadings.label = TRUE,
loadings.label.size = 3,
loadings.label.colour = "black")+theme_light()
